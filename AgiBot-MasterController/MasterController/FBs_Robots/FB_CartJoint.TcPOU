<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_CartJoint" Id="{b7c25fb7-df7c-4023-8b4f-0e081206f704}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CartJoint EXTENDS FB_JointBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="init" Id="{84573e7e-4589-4282-ac79-55bd1bfe9a81}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_INPUT
	i_jntIdx :INT;
	i_controlCycleTime :LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_cycleTime := i_controlCycleTime;

// hardware parameters
m_motorEncoderRes :=GVL_CartJointParameters.g_incEncoderRes[i_jntIdx];
m_linkEncoderRes :=GVL_CartJointParameters.g_absEncoderRes[i_jntIdx];
m_motorReduction :=GVL_CartJointParameters.g_motorReduction[i_jntIdx];
m_linkEncoderReduction :=GVL_CartJointParameters.g_absEncoderReduction[i_jntIdx];
m_trqConst :=GVL_CartJointParameters.g_motorTrqConst[i_jntIdx];
m_maxCurrent :=GVL_CartJointParameters.g_motorMaxCurrent[i_jntIdx];
m_motorDir :=GVL_CartJointParameters.g_motorDir[i_jntIdx];								
m_linkEncoderDir :=GVL_CartJointParameters.g_asbEncoderDir[i_jntIdx];
m_minJntPos	:=GVL_CartJointParameters.g_minJntPos[i_jntIdx];
m_maxJntPos	:=GVL_CartJointParameters.g_maxJntPos[i_jntIdx];

//link encoder calibartion data
m_minLinkEncoder :=GVL_CartJointCaliData.g_minLinkEncoder[i_jntIdx] - m_linkEncoderDir*GVL_CartJointCaliData.g_linkEncLimitBuffer; // expand limit
m_maxLinkEncoder :=GVL_CartJointCaliData.g_maxLinkEncoder[ i_jntIdx] + m_linkEncoderDir*GVL_CartJointCaliData.g_linkEncLimitBuffer; // expand limit
m_caliLinkEncoder :=GVL_CartJointCaliData.g_caliLinkEncoder[i_jntIdx];
m_linkEncCaliJntPos :=GVL_CartJointCaliData.g_linkEncCaliJntPos[i_jntIdx];
m_linkEncZeroCross :=GVL_CartJointCaliData.g_linkEncZeroCross[i_jntIdx];
m_multiCycles :=GVL_CartJointCaliData.g_multipleCyclesJoint[i_jntIdx];

// convert cali link encoder if joint cross zero
IF 1=m_linkEncZeroCross THEN
	IF 1=m_linkEncoderDir AND m_caliLinkEncoder < m_minLinkEncoder THEN
		m_caliLinkEncoder := GVL_CartJointCaliData.g_caliLinkEncoder[i_jntIdx] + m_linkEncoderRes;
	ELSIF -1=m_linkEncoderDir AND m_caliLinkEncoder < m_maxLinkEncoder THEN
		m_caliLinkEncoder := GVL_CartJointCaliData.g_caliLinkEncoder[i_jntIdx] + m_linkEncoderRes;
	END_IF
END_IF

// macro data
m_trq2CurrentRatio:=m_motorDir * 1000.0/(m_trqConst*m_motorReduction);
m_current2TrqRatio:=m_motorDir * (m_trqConst*m_motorReduction)/1000.0;
m_linkEnc2PosRatio := 2*PI*m_linkEncoderDir/(m_linkEncoderReduction*m_linkEncoderRes);
m_motorEnc2PosRatio := 2*PI * m_motorDir/(m_motorReduction * m_motorEncoderRes);

// motor data init
m_curJntVel:=0;
m_curJntTrq :=0;
m_rawCurrent :=0;
m_filtCurrent :=0;
m_cmdJntVel :=0.0;
m_cmdJntTrq :=0.0;
m_cmdCurrent := 0.0;

// filter init
m_jntVelLpf.init(1, g_curJntVelLpfCutoffFreq, g_armCtrlFreq);
m_cmdTrqLpf.init(1, g_cmdJntTrqLpfCutoffFreq, g_armCtrlFreq);
m_curTrqLpf.init(1, g_curJntTrqLpfCutoffFreq, g_armCtrlFreq);

// driver init value
m_motorOutputs.m_controlWord:=DriverCtrlWord_INIT;
m_motorOutputs.m_opMode:=INT_TO_SINT(DriverOPMode_Pos);
m_motorOutputs.m_cmdCurrent:=0;
m_motorOutputs.m_cmdMotorEncoder:=m_motorInputs.m_motorEncoder;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CartJoint">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_CartJoint.init">
      <LineId Id="166" Count="54" />
      <LineId Id="39" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>