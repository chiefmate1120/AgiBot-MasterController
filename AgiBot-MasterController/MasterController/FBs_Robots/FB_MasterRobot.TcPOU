<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_MasterRobot" Id="{8cbdb2ba-9735-46e3-8cbc-296330acc8cc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MasterRobot
VAR
	// flag if slave are connected
	m_slaveOnLine :BOOL :=FALSE;
	m_slaveOnLineCheck :FB_slaveConnectionCheck;
	
	// master-slave motion scale
	m_motionScale :LREAL;
	
	// monitor angle
	m_monitorAngle :LREAL;
	
	// master arm base pose(shoulder pose) in monitor coordinate
	m_shoulderPoseInMonitor :ARRAY[1..2] OF ST_Frame;
	
	// master arms, responsible for arm kinematic and control
	m_masterArms :ARRAY[1..g_mArmNum] OF FB_MasterArm;
	
	// arm state
	m_masterArmState:ARRAY[1..g_mArmNum] OF E_masterArmState:=[E_masterArmState.MasterArmState_Init,E_masterArmState.MasterArmState_Error];
	m_lastMasterArmState:ARRAY[1..g_mArmNum] OF E_masterArmState:=[E_masterArmState.MasterArmState_Init,E_masterArmState.MasterArmState_Error];
	m_nextMasterArmState:ARRAY[1..g_mArmNum] OF E_masterArmState:=[E_masterArmState.MasterArmState_Init,E_masterArmState.MasterArmState_Error];
	
	// index(1 to 4) of slave arm which is tele-linked to master arm
	m_teleSlaveArmIdx:ARRAY[1..g_mArmNum] OF E_MatchedSlaveArmIdx:=[MatchedSlaveArmIdx_NULL, MatchedSlaveArmIdx_null];
	m_instruArmState:ARRAY [1..g_mArmNum] OF E_SlaveArmState:=[SlaveArmState_Error, SlaveArmState_Error];
	m_scopeArmState :E_SlaveArmState := SlaveArmState_Error;
	m_scopeArmIndex : E_MatchedSlaveArmIdx :=MatchedSlaveArmIdx_null;
	
	// flag if tele-manipulated slave arm is switched
	m_armSwitchFlag :ARRAY[1..2] OF BOOL := [2(FALSE)];
	
	// flag to enter master-slave control, triggerd by pinching the gripper twice in on second
	m_MSCtrlTriggerFlag :ARRAY[1..g_mArmNum] OF BOOL:=[FALSE, FALSE];
	m_MSCtrlTriggerCheck :ARRAY[1..g_mArmNum] OF FB_MSCtrlTriggerCheck;
	
	// all arm controller instance 
	m_armCtrlFactory :ARRAY[1..g_mArmNum,1..MasterArmState_totalNum] OF I_MasterArmCtrl;
	m_armError :ARRAY[1..g_mArmNum] OF FB_StateCtrlError;
	m_armInit :ARRAY[1..g_mArmNum] OF FB_StateCtrlInit;
	m_armHome :ARRAY[1..g_mArmNum] OF FB_StateCtrlHome;
	m_armStandBy :ARRAY[1..g_mArmNum] OF FB_StateCtrlStandBy;
	m_armMatching :ARRAY[1..g_mArmNum] OF FB_StateCtrlMatching;
	m_armReady :ARRAY[1..g_mArmNum] OF FB_StateCtrlReady;
	m_armMasterSlave :ARRAY[1..g_mArmNum] OF FB_StateCtrlMasterSlave;
	m_armClutch :ARRAY[1..g_mArmNum] OF FB_StateCtrlClutch;
	m_armEndoscope :ARRAY[1..g_mArmNum] OF FB_StateCtrlEndoscope;
	m_armCart :ARRAY[1..g_mArmNum] OF FB_StateCtrlCart;
	m_armGravityCali :ARRAY[1..g_mArmNum] OF FB_StateCtrlGraCali;
	m_armTest :ARRAY[1..g_mArmNum] OF FB_StateCtrlTest;
	m_armDisable :ARRAY[1..g_mArmNum] OF FB_StateCtrlDisable;
	
	// arm controller interface
	m_armCtrl :ARRAY[1..g_mArmNum] OF I_MasterArmCtrl;
	m_armCtrlCmds :ARRAY[1..g_mArmNum] OF ST_ArmCtrlCmds;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

]]></ST>
    </Implementation>
    <Folder Name="property" Id="{8f86633f-3f94-408a-ac9b-8ee0ebd6bdac}" />
    <Method Name="checkTeleSlaveArmIdx" Id="{e877542b-f696-4449-b007-3e9fbc5ffaab}">
      <Declaration><![CDATA[METHOD PROTECTED checkTeleSlaveArmIdx : BOOL
VAR_IN_OUT CONSTANT
	i_masterInputDataPool:ST_MasterInputDataPool;
END_VAR
VAR
	nextTeleSlaveArmIdx:ARRAY[1..g_mArmNum] OF E_MatchedSlaveArmIdx;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nextTeleSlaveArmIdx:=m_teleSlaveArmIdx;

// switch tele-controlled arm index when arm is disenabled
IF i_masterInputDataPool.m_slaveStatus.m_armState[1] = SlaveArmState_Disable THEN
	nextTeleSlaveArmIdx[1]:= MatchedSlaveArmIdx_2;
ELSIF i_masterInputDataPool.m_slaveStatus.m_armState[2] = SlaveArmState_Disable THEN
	nextTeleSlaveArmIdx[1]:= MatchedSlaveArmIdx_1;
ELSIF i_masterInputDataPool.m_slaveStatus.m_armState[3] = SlaveArmState_Disable THEN
	nextTeleSlaveArmIdx[2]:= MatchedSlaveArmIdx_4;
ELSIF i_masterInputDataPool.m_slaveStatus.m_armState[4] = SlaveArmState_Disable THEN
	nextTeleSlaveArmIdx[2]:= MatchedSlaveArmIdx_3;
END_IF

// switch tele-controlled arm index when endoscope is mounted
IF m_scopeArmIndex = MatchedSlaveArmIdx_1 OR m_scopeArmIndex = MatchedSlaveArmIdx_2 THEN
	// left arm
	IF m_scopeArmIndex = MatchedSlaveArmIdx_1 THEN
		nextTeleSlaveArmIdx[1] := MatchedSlaveArmIdx_2;
	ELSE
		nextTeleSlaveArmIdx[1] := MatchedSlaveArmIdx_1;
	END_IF
	
	// right arm
	// switch tele-controlled arm index when arm switch is triggerd
	IF i_masterInputDataPool.m_cartStatus.m_armSwitch THEN
		IF m_teleSlaveArmIdx[2]=MatchedSlaveArmIdx_3 AND i_masterInputDataPool.m_slaveStatus.m_armState[4]=SlaveArmState_InstruReady THEN
			nextTeleSlaveArmIdx[2] := MatchedSlaveArmIdx_4;
		ELSIF 
			m_teleSlaveArmIdx[2]=MatchedSlaveArmIdx_4 AND i_masterInputDataPool.m_slaveStatus.m_armState[3]=SlaveArmState_InstruReady THEN
			nextTeleSlaveArmIdx[2] := MatchedSlaveArmIdx_3;
		END_IF
	END_IF

ELSIF m_scopeArmIndex = MatchedSlaveArmIdx_3 OR m_scopeArmIndex = MatchedSlaveArmIdx_4 THEN
	// left arm
	// switch tele-controlled arm index when arm switch is triggerd
	IF i_masterInputDataPool.m_cartStatus.m_armSwitch THEN
		IF m_teleSlaveArmIdx[1]=MatchedSlaveArmIdx_1 AND i_masterInputDataPool.m_slaveStatus.m_armState[2]=SlaveArmState_InstruReady THEN
			nextTeleSlaveArmIdx[1] := MatchedSlaveArmIdx_2;
		ELSIF 
			m_teleSlaveArmIdx[1]=MatchedSlaveArmIdx_2 AND i_masterInputDataPool.m_slaveStatus.m_armState[1]=SlaveArmState_InstruReady THEN
			nextTeleSlaveArmIdx[1] := MatchedSlaveArmIdx_1;
		END_IF
	END_IF

	// right arm
	IF m_scopeArmIndex = MatchedSlaveArmIdx_3 THEN
		nextTeleSlaveArmIdx[2] := MatchedSlaveArmIdx_4;
	ELSE
		nextTeleSlaveArmIdx[2] := MatchedSlaveArmIdx_3;
	END_IF
END_IF

// check if arm-switch is triggerd
m_armSwitchFlag[1]:=m_teleSlaveArmIdx[1] <>  nextTeleSlaveArmIdx[1];
m_armSwitchFlag[2]:=m_teleSlaveArmIdx[2] <>  nextTeleSlaveArmIdx[2];

m_teleSlaveArmIdx:= nextTeleSlaveArmIdx;]]></ST>
      </Implementation>
    </Method>
    <Method Name="controllerTransit" Id="{43db9dd9-8e13-4a66-a84f-800b29862df6}">
      <Declaration><![CDATA[METHOD PROTECTED controllerTransit : BOOL
VAR_INPUT
END_VAR
VAR
	i :INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_mArmNum DO 
	IF m_nextMasterArmState[i]<> m_masterArmState[i] THEN
		// reset current controller
		m_armCtrl[i].reset();
		
		// transit to new controller
		m_lastMasterArmState[i]:=m_masterArmState[i];
		m_masterArmState[i]:=m_nextMasterArmState[i];
		m_armCtrl[i]:=m_armCtrlFactory[i,m_masterArmState[i]];
		
		// init next controller
		m_armCtrl[i].Init(m_masterArms[i],m_armCtrlCmds[i]);
		m_masterArms[i].updateCmds(m_armCtrlCmds[i]);
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="getStatus" Id="{b6139e8c-2703-424c-9761-ad1add6b1ff1}">
      <Declaration><![CDATA[METHOD PUBLIC getStatus : BOOL
VAR_IN_OUT
	// master robot information, including arm status and cartesian data
	r_masterStatus :ST_MasterStatus;
	
	// master robot joint data
	r_masterJointsData :ST_MasterJointData;
	
END_VAR

VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[r_masterStatus.m_motionScale := m_motionScale;
r_masterStatus.m_armState:=m_masterArmState;
r_masterStatus.m_teleSlaveArmIdx := m_teleSlaveArmIdx;

FOR i:=1 TO g_mArmNum DO
	// current info
	r_masterStatus.m_gripAngle[i]:=m_masterArms[i].gripAngle;
	// cartesion
	r_masterStatus.m_curArmPose[i]:=m_masterArms[i].curCartPose;
	r_masterStatus.m_curArmTwist[i]:=m_masterArms[i].curCartTwist;
	// joint
	r_masterJointsData.m_curMotorPos[i]:=m_masterArms[i].curMotorPos;
	r_masterJointsData.m_curLinkPos[i]:=m_masterArms[i].curLinkPos;
	r_masterJointsData.m_curJntPos[i]:=m_masterArms[i].curJntPos;
	r_masterJointsData.m_curJntVel[i]:=m_masterArms[i].curJntVel;
	r_masterJointsData.m_curJntTrq[i]:=m_masterArms[i].curJntTrq;
	r_masterJointsData.m_rawJntCurrent[i]:=m_masterArms[i].rawJntCurrent;
	r_masterJointsData.m_filtJntCurrent[i]:=m_masterArms[i].filtJntCurrent;
	
	// command info
	// cartesion
	r_masterStatus.m_cmdArmPose[i]:=m_masterArms[i].m_cmdCartPose;
	r_masterStatus.m_cmdArmTwist[i]:=m_masterArms[i].m_cmdCartTwist;
	// joint info
	r_masterJointsData.m_cmdJntPos[i]:=m_masterArms[i].m_cmdJntPos;
	r_masterJointsData.m_cmdJntVel[i]:=m_masterArms[i].m_cmdJntVel;
	r_masterJointsData.m_cmdJntTrq[i]:=m_masterArms[i].m_cmdJntTrq;
	r_masterJointsData.m_cmdJntCurrent[i]:=m_masterArms[i].cmdJntCurrent;
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{610a17f3-34c5-4e3c-bbbc-19f9c2f46946}">
      <Declaration><![CDATA[METHOD PUBLIC Init : BOOL
VAR_INPUT
END_VAR
VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// init tele-controlled arm index
m_teleSlaveArmIdx[1]:=MatchedSlaveArmIdx_1;
m_teleSlaveArmIdx[2]:=MatchedSlaveArmIdx_3;

// shoulder pose in monitor
m_shoulderPoseInMonitor[1].m_pos[2]:=-g_shoulderDistance/2;
m_shoulderPoseInMonitor[2].m_pos[2]:=g_shoulderDistance/2;

FOR i:=1 TO g_mArmNum DO
	// arm init
	m_masterArms[i].Init(i);
	m_masterArmState[i]:=MasterArmState_Init;
	m_lastMasterArmState[i]:=MasterArmState_Init;
	m_nextMasterArmState[i]:=MasterArmState_Init;
	
	// command init
	m_armCtrlCmds[i].m_jntEnableFlag := g_zeroVec7i;
	m_armCtrlCmds[i].m_jntOPMode := g_allPosMode;
	m_armCtrlCmds[i].m_cmdCartPose := m_masterArms[i].curCartPose;
	m_armCtrlCmds[i].m_cmdCartTwist := g_zeroVec6d;
	m_armCtrlCmds[i].m_cmdJntPos := m_masterArms[i].curJntPos;
	m_armCtrlCmds[i].m_cmdJntVel := g_zeroVec7d;
	m_armCtrlCmds[i].m_cmdJntAcc := g_zeroVec7d;
	m_armCtrlCmds[i].m_cmdJntTrq := g_zeroVec7d;
	
	// generate controller factory
	m_armCtrlFactory[i,MasterArmState_Error] := m_armError[i];
	m_armCtrlFactory[i,MasterArmState_Init] := m_armInit[i];
	m_armCtrlFactory[i,MasterArmState_Home] := m_armHome[i];
	m_armCtrlFactory[i,MasterArmState_Standby] := m_armStandBy[i];
	m_armCtrlFactory[i,MasterArmState_Matching] := m_armMatching[i];
	m_armCtrlFactory[i,MasterArmState_Ready] := m_armReady[i];
	m_armCtrlFactory[i,MasterArmState_MasterSlave] := m_armMasterSlave[i];
	m_armCtrlFactory[i,MasterArmState_Clutch] := m_armClutch[i];
	m_armCtrlFactory[i,MasterArmState_Endoscope] := m_armEndoscope[i];
	m_armCtrlFactory[i,MasterArmState_Cart] := m_armCart[i];
	m_armCtrlFactory[i,MasterArmState_GravityCali] := m_armGravityCali[i];
	m_armCtrlFactory[i,MasterArmState_Test] := m_armTest[i];
	m_armCtrlFactory[i,MasterArmState_Disable] := m_armDisable[i];

	// assign controller
	m_armCtrl[i]:=m_armCtrlFactory[i,m_masterArmState[i]];
	m_armCtrl[i].Init(m_masterArms[i],m_armCtrlCmds[i]);
	
	// init master-slave trigger
	m_MSCtrlTriggerCheck[i].init(g_armCtrlCycleTime, 2);
END_FOR
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="MSCtrlTriggerCheck" Id="{848392d9-479b-4441-b2d2-6aff07409695}">
      <Declaration><![CDATA[METHOD PROTECTED MSCtrlTriggerCheck : BOOL
VAR_IN_OUT CONSTANT
		i_masterInputDataPool:ST_MasterInputDataPool;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=1 TO g_mArmNum DO
	IF MasterArmState_Ready = m_masterArmState[i] AND SlaveArmState_InstruReady = m_instruArmState[i] 
		AND SlaveArmState_ScopeReady = m_scopeArmState AND i_masterInputDataPool.m_cartStatus.m_surgonReady THEN
		m_MSCtrlTriggerFlag[i]:=m_MSCtrlTriggerCheck[i].run(m_masterArms[i].gripAngle);
	END_IF
	
	IF  MatchedSlaveArmIdx_NULL =  m_teleSlaveArmIdx[i] OR   NOT(i_masterInputDataPool.m_cartStatus.m_surgonReady) 
		OR 	NOT(i_masterInputDataPool.m_slaveStatus.m_instruStauts[m_teleSlaveArmIdx[i]].m_ready) THEN
		m_MSCtrlTriggerFlag[i]:=FALSE;
		m_MSCtrlTriggerCheck[i].reset();
	END_IF  
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="run" Id="{ed6f787a-4dc0-4602-b386-92a3c3880a23}">
      <Declaration><![CDATA[METHOD PUBLIC run : BOOL
VAR_IN_OUT CONSTANT
	i_masterInputDataPool:ST_MasterInputDataPool;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_motionScale := i_masterInputDataPool.m_UIData.m_motionScale;
m_monitorAngle := i_masterInputDataPool.m_cartStatus.m_monitorAngle;

// check slave connection
m_slaveOnLine := m_slaveOnLineCheck.check(i_masterInputDataPool.m_slaveStatus.m_slaveHeartBeat);

// update shoulder pose
updateShoulderPose();

// check tele-operated slave arms index
checkTeleSlaveArmIdx(i_masterInputDataPool);

// state machine transition
stateMachine(i_masterInputDataPool);

// controller transition
controllerTransit();

FOR i:=1 TO g_mArmNum DO
	// update dynamic data
	m_masterArms[i].updateDyna(i_masterInputDataPool.m_masterDynaData);
								
	// update master arm kinematics
	m_masterArms[i].updateStatus();
	
	// null ptr check
	IF 0 = m_armCtrl[i] THEN
		EXIT;
	END_IF
	
	// run controller
	m_armCtrl[i].run(m_teleSlaveArmIdx[i], m_shoulderPoseInMonitor[i], m_masterArms[i],
						i_masterInputDataPool.m_slaveStatus,m_armCtrlCmds[i]);

	// update commands to drivers
	m_masterArms[i].updateCmds(m_armCtrlCmds[i]);

END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Property Name="shoulderPose" Id="{6004f8dc-7ada-4ad2-9d1e-93605d16d31e}" FolderPath="property\">
      <Declaration><![CDATA[PROPERTY shoulderPose : ARRAY[1..2] OF ST_Frame]]></Declaration>
      <Get Name="Get" Id="{4fa3cfe8-ad39-4a7f-9fe0-f47bb30c0cd4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[shoulderPose := m_shoulderPoseInMonitor;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="stateMachine" Id="{b9cc8560-9309-49e3-93b5-28cb02b4f5cc}">
      <Declaration><![CDATA[// state machine check and transit 
METHOD PROTECTED stateMachine : BOOL
VAR_IN_OUT CONSTANT
		i_masterInputDataPool:ST_MasterInputDataPool;
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// get instrument arm state
FOR i:=1 TO g_mArmNum DO
	IF MatchedSlaveArmIdx_NULL =  m_teleSlaveArmIdx[i] THEN
		m_instruArmState[i] := SlaveArmState_Error;
	ELSE
		m_instruArmState[i] := i_masterInputDataPool.m_slaveStatus.m_armState[m_teleSlaveArmIdx[i]];
	END_IF
END_FOR

// get endoscope arm state
m_scopeArmState := SlaveArmState_Error;
m_scopeArmIndex := MatchedSlaveArmIdx_null;
FOR i:=1 TO g_sArmNum DO 
	IF InstruType_endoscope =  i_masterInputDataPool.m_slaveStatus.m_instruStauts[i].m_type THEN
		m_scopeArmState := i_masterInputDataPool.m_slaveStatus.m_armState[i];
		m_scopeArmIndex := i;
		EXIT;
	END_IF
END_FOR

// check if master-slave grip angle match
MSCtrlTriggerCheck(i_masterInputDataPool);

// State machine transit 
FOR i:=1 TO g_mArmNum DO
	CASE m_masterArmState[i] OF
		// error
		MasterArmState_Error:
			// to standby
			IF FALSE = i_masterInputDataPool.m_safetyData.m_masterErrFlag[i] THEN
				m_nextMasterArmState[i] := MasterArmState_Standby;
			END_IF
			
		// init
		MasterArmState_Init:
			// to home(self-check)
			IF m_armCtrl[i].isFinished AND i_masterInputDataPool.m_UIData.m_selfCheckFlag  THEN
				// NOTICE: multiple cycles joints back to center during initialization
				// 			need to reset joints encoder data again
				m_masterArms[i].initJntPos();
				m_nextMasterArmState[i]:=MasterArmState_Home;
			END_IF

		//home
		MasterArmState_Home:
			IF m_armCtrl[i].isFinished  THEN
				m_nextMasterArmState[i]:=MasterArmState_Standby;
			END_IF
		
		//standby
		MasterArmState_Standby:
			// to matching
			IF SlaveArmState_InstruReady = m_instruArmState[i] AND SlaveArmState_ScopeReady = m_scopeArmState THEN
				m_nextMasterArmState[i]:=MasterArmState_Matching;
			// to clutch
			ELSIF i_masterInputDataPool.m_cartStatus.m_clutchSwitch OR m_masterArms[i].handClutchSwitch THEN
				m_nextMasterArmState[i] := MasterArmState_Clutch; 
			// to cart
			ELSIF i_masterInputDataPool.m_cartStatus.m_consoleInAdjust THEN
				m_nextMasterArmState[i] := MasterArmState_Cart;
			END_IF
		
		//matching
		MasterArmState_Matching:
			// to ready
			IF m_armCtrl[i].isFinished THEN
				m_nextMasterArmState[i]:=MasterArmState_Ready;
			// to standby
			ELSIF SlaveArmState_InstruReady <> m_instruArmState[i] OR SlaveArmState_ScopeReady <> m_scopeArmState
						OR m_armSwitchFlag[i] THEN
				m_nextMasterArmState[i]:=MasterArmState_Standby;
			// to cart
			ELSIF i_masterInputDataPool.m_cartStatus.m_consoleInAdjust THEN
				m_nextMasterArmState[i] := MasterArmState_Cart;
			END_IF
		
		//ready
		MasterArmState_Ready:
			// to standby
			IF SlaveArmState_InstruReady <> m_instruArmState[i] OR SlaveArmState_ScopeReady <> m_scopeArmState
					OR m_armSwitchFlag[i] THEN
				m_nextMasterArmState[i]:=MasterArmState_Standby;
			// to clutch
			ELSIF i_masterInputDataPool.m_cartStatus.m_clutchSwitch OR m_masterArms[i].handClutchSwitch THEN
				m_nextMasterArmState[i] := MasterArmState_Clutch; 
			// to cart
			ELSIF i_masterInputDataPool.m_cartStatus.m_consoleInAdjust THEN
				m_nextMasterArmState[i] := MasterArmState_Cart;
			// to master-slave
			ELSIF SlaveArmState_InstruReady = m_instruArmState[i] AND SlaveArmState_ScopeReady = m_scopeArmState 
					AND i_masterInputDataPool.m_cartStatus.m_surgonReady AND m_MSCtrlTriggerFlag[i] THEN
				m_nextMasterArmState[i] := MasterArmState_MasterSlave;
			END_IF
		
		//MasterSlave
		MasterArmState_MasterSlave:
			// to standdy
			IF (SlaveArmState_InstruReady <> m_instruArmState[i] AND SlaveArmState_MasterSlave <> m_instruArmState[i])
				OR SlaveArmState_ScopeReady <> m_scopeArmState OR NOT(i_masterInputDataPool.m_cartStatus.m_surgonReady)
				OR m_armSwitchFlag[i] THEN
				m_nextMasterArmState[i]:=MasterArmState_Standby;
			// to clutch
			ELSIF i_masterInputDataPool.m_cartStatus.m_clutchSwitch OR m_masterArms[i].handClutchSwitch THEN
				m_nextMasterArmState[i] := MasterArmState_Clutch; 
			// to cart
			ELSIF i_masterInputDataPool.m_cartStatus.m_consoleInAdjust THEN
				m_nextMasterArmState[i] := MasterArmState_Cart;
			END_IF
			
		//Clutch
		MasterArmState_Clutch:
			// to standby
			IF NOT(i_masterInputDataPool.m_cartStatus.m_clutchSwitch) AND NOT(m_masterArms[i].handClutchSwitch) THEN
				m_nextMasterArmState[i]:=MasterArmState_Standby;
			END_IF
		
		// Endoscope 
		MasterArmState_Endoscope:
			// to standby
			IF NOT(i_masterInputDataPool.m_cartStatus.m_endoscopeSwitch) OR SlaveArmState_ScopeReady <> m_scopeArmState
						OR SlaveArmState_EndoScope <> m_scopeArmState THEN
				m_nextMasterArmState[i] := MasterArmState_Standby;
			// to clutch
			ELSIF i_masterInputDataPool.m_cartStatus.m_clutchSwitch OR m_masterArms[i].handClutchSwitch THEN
				m_nextMasterArmState[i] := MasterArmState_Clutch; 
			// to cart
			ELSIF i_masterInputDataPool.m_cartStatus.m_consoleInAdjust THEN
				m_nextMasterArmState[i] := MasterArmState_Cart;
			END_IF
			
		// Cart 
		MasterArmState_Cart:
			// to standby
			IF NOT( i_masterInputDataPool.m_cartStatus.m_consoleInAdjust) THEN
				m_nextMasterArmState[i] := MasterArmState_Standby;
			END_IF
		
		//Gravity Calibration
		MasterArmState_GravityCali:
			// to standby
			IF  m_armCtrl[i].isFinished THEN
				m_nextMasterArmState[i]:=MasterArmState_Standby;
			END_IF
	
		//arm test
		MasterArmState_Test:
			// to standby
			IF  m_armCtrl[i].isFinished THEN
				m_nextMasterArmState[i]:=MasterArmState_Standby;
			END_IF
			
		//arm disable
		MasterArmState_Disable:
			// to standby
			IF  NOT(i_masterInputDataPool.m_UIData.m_masterArmDisableFlag[i]) THEN
				m_nextMasterArmState[i]:=MasterArmState_Standby;
			END_IF
	END_CASE
	
	// arm disable
	IF i_masterInputDataPool.m_UIData.m_masterArmDisableFlag[i] AND m_masterArmState[i] <> MasterArmState_Init THEN
		m_nextMasterArmState[i] := MasterArmState_Disable;
	// error check
	ELSIF i_masterInputDataPool.m_safetyData.m_masterErrFlag[i] THEN
		m_nextMasterArmState[i] := MasterArmState_Error;
	END_IF
	
END_FOR

// To Endoscope Control 
IF SlaveArmState_ScopeReady = m_scopeArmState AND i_masterInputDataPool.m_cartStatus.m_endoscopeSwitch AND
  (MasterArmState_Standby = m_masterArmState[1] OR MasterArmState_Ready = m_masterArmState[1] OR MasterArmState_MasterSlave = m_masterArmState[1]) AND 
  (MasterArmState_Standby = m_masterArmState[2] OR MasterArmState_Ready = m_masterArmState[2] OR MasterArmState_MasterSlave = m_masterArmState[2]) THEN
	m_nextMasterArmState[1] := MasterArmState_Endoscope;
	m_nextMasterArmState[2] := MasterArmState_Endoscope;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateShoulderPose" Id="{fb1a54a0-df1a-4720-ac59-3d297fc90e27}">
      <Declaration><![CDATA[METHOD PROTECTED updateShoulderPose : BOOL
VAR_INPUT
END_VAR
VAR
	monitorRot :mat3d;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// base monitor frame(0 rotation angle) in current monitor frame 
monitorRot := rotY( -m_monitorAngle);

// shoulder pose in current monitor frame
matMultiply(g_shoulderRotInMonitor,monitorRot, m_shoulderPoseInMonitor[1].m_rot);
m_shoulderPoseInMonitor[2].m_rot:=m_shoulderPoseInMonitor[1].m_rot;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MasterRobot">
      <LineId Id="60" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterRobot.checkTeleSlaveArmIdx">
      <LineId Id="90" Count="1" />
      <LineId Id="72" Count="2" />
      <LineId Id="77" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="44" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="33" Count="7" />
      <LineId Id="50" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="62" Count="7" />
      <LineId Id="60" Count="0" />
      <LineId Id="53" Count="5" />
      <LineId Id="23" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="97" Count="0" />
      <LineId Id="96" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterRobot.controllerTransit">
      <LineId Id="6" Count="12" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterRobot.getStatus">
      <LineId Id="29" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="57" Count="5" />
      <LineId Id="95" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterRobot.Init">
      <LineId Id="137" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="80" Count="2" />
      <LineId Id="87" Count="5" />
      <LineId Id="94" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="62" Count="9" />
      <LineId Id="108" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="125" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="61" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterRobot.MSCtrlTriggerCheck">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="10" Count="3" />
      <LineId Id="18" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterRobot.run">
      <LineId Id="78" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="19" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="97" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="73" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterRobot.shoulderPose.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterRobot.stateMachine">
      <LineId Id="188" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="194" Count="3" />
      <LineId Id="191" Count="1" />
      <LineId Id="199" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="200" Count="1" />
      <LineId Id="203" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="253" Count="1" />
      <LineId Id="258" Count="0" />
      <LineId Id="255" Count="2" />
      <LineId Id="259" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="75" Count="2" />
      <LineId Id="29" Count="1" />
      <LineId Id="41" Count="2" />
      <LineId Id="45" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="237" Count="2" />
      <LineId Id="262" Count="2" />
      <LineId Id="136" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="131" Count="1" />
      <LineId Id="210" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="265" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="214" Count="1" />
      <LineId Id="334" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="241" Count="0" />
      <LineId Id="269" Count="1" />
      <LineId Id="268" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="95" Count="2" />
      <LineId Id="219" Count="1" />
      <LineId Id="279" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="246" Count="1" />
      <LineId Id="245" Count="0" />
      <LineId Id="272" Count="1" />
      <LineId Id="271" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="157" Count="1" />
      <LineId Id="222" Count="0" />
      <LineId Id="160" Count="2" />
      <LineId Id="116" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="223" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="293" Count="1" />
      <LineId Id="292" Count="0" />
      <LineId Id="275" Count="1" />
      <LineId Id="274" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="163" Count="1" />
      <LineId Id="261" Count="0" />
      <LineId Id="165" Count="2" />
      <LineId Id="169" Count="0" />
      <LineId Id="178" Count="4" />
      <LineId Id="177" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="118" Count="4" />
      <LineId Id="117" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="316" Count="4" />
      <LineId Id="315" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="322" Count="2" />
      <LineId Id="153" Count="3" />
      <LineId Id="325" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="225" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterRobot.updateShoulderPose">
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>