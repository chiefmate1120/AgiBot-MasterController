<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_MasterArmCheck" Id="{7fa43d5a-568e-4b76-ad81-6c5cf7c4ee74}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MasterArmCheck
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// whole arm error flag
	m_armErrFlag :ARRAY[1..g_mArmNum] OF BOOL:=[2(FALSE)];
	
	// cartesian pose error flag
	m_cartPoseErrFlag :ARRAY[1..g_mArmNum] OF BOOL;
	m_cartPoseErrCounts:ARRAY[1..g_mArmNum] OF INT;
	m_cartPosErr :ARRAY[1..g_mArmNum] OF Vec3d;		// cartesian position error
	m_cartOriErr:ARRAY[1..g_mArmNum] OF  Vec3d;	// cartesian rotation angle (angle  * axis)
	
	// joint control error flag
	m_jntCtrlErrFlag :ARRAY[1..g_mArmNum] OF Vec7b;
	m_jntCtrlErrCounts :ARRAY[1..g_mArmNum] OF Vec7i;
	m_jntCtrlErr:ARRAY[1..g_mArmNum]  OF Vec7d;		// joint position control error
	
	// joint encoder error flag
	m_jntEncErrFlag :ARRAY[1..g_mArmNum] OF Vec7b;
	m_jntEncErrCounts :ARRAY[1..g_mArmNum] OF Vec7i ;
	m_jntEncErr:ARRAY[1..g_mArmNum]  OF Vec7d;		// motor and joint encoder error
	
	// joint velocity error flag
	m_jntVelErrFlag :ARRAY[1..g_mArmNum] OF Vec7b;
	m_jntVelErrCounts :ARRAY[1..g_mArmNum] OF Vec7i;
	
	// joint position limit error flag
	m_jntLimitErrFlag :ARRAY[1..g_mArmNum] OF Vec7b;
	m_jntLimitErrCounts :ARRAY[1..g_mArmNum] OF Vec7i;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="check" Id="{321cd4e5-6c66-4065-8a9a-a49a4a7544f4}">
      <Declaration><![CDATA[METHOD check : BOOL
VAR_IN_OUT CONSTANT
	i_masterStatus : ST_MasterStatus;
	i_masterJointData :ST_MasterJointData;
END_VAR
VAR_OUTPUT
	o_errorFlag :ARRAY[1..g_mArmNum] OF BOOL ;
END_VAR

VAR
	i ,j:INT ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// calculate error
FOR i:=1 TO g_mArmNum DO 
	// stop check if arm is already in error state
	IF m_armErrFlag[i] OR i_masterStatus.m_armState[i] = MasterArmState_Error THEN 
		CONTINUE;
	END_IF
	
	// NOT check cartesion pose error
	m_cartPoseErrFlag[i]:=FALSE;
	//m_cartPoseErrFlag[i]:=poseErrCheck(i_masterStatus.m_cmdArmPose[i],  i_masterStatus.m_curArmPose[i],
	//										m_cartPoseErrCounts[i], m_cartPosErr[i], m_cartOriErr[i]);
	
	// joint control error
	m_jntCtrlErrFlag[i]:=jntCtrlErrCheck(i_masterJointData.m_cmdJntPos[i], i_masterJointData.m_curJntPos[i],
										m_jntCtrlErrCounts[i], m_jntCtrlErr[i]);
	
	// encoder error
	m_jntEncErrFlag[i]:=jntEncErrCheck(i_masterJointData.m_curMotorPos[i], i_masterJointData.m_curLinkPos[i],
										m_jntEncErrCounts[i], m_jntEncErr[i]);
	
	// joint limit error
	m_jntLimitErrFlag[i]:=jntLimitErrCheck(i,i_masterJointData.m_curJntPos[i],m_jntLimitErrCounts[i]);
	IF i_masterStatus.m_armState[i] = MasterArmState_Init THEN
		m_jntLimitErrFlag[i][7] := false;
	END_IF
										
	// final arm error status check
	IF  m_cartPoseErrFlag[i] THEN
		m_armErrFlag[i]:=TRUE;
		CONTINUE;
	END_IF
	
	FOR j:=1 TO g_mJntNum DO 
		//IF m_jntCtrlErrFlag[i][j] OR m_jntEncErrFlag[i][j] OR m_jntVelErrFlag[i][j] OR m_jntLimitErrFlag[i][j] THEN
		IF m_jntEncErrFlag[i][j] OR m_jntVelErrFlag[i][j] OR m_jntLimitErrFlag[i][j] THEN
			m_armErrFlag[i]:=TRUE;
			EXIT;
		END_IF
	END_FOR
	
END_FOR

o_errorFlag:=m_armErrFlag;]]></ST>
      </Implementation>
    </Method>
    <Method Name="jntCtrlErrCheck" Id="{f2b82bf6-f8b5-4f0c-98ca-679940c1f1fb}">
      <Declaration><![CDATA[METHOD jntCtrlErrCheck : Vec7b
VAR_INput
	i_cmdJntPos : Vec7d;
	i_curJntPos : Vec7d;
END_VAR
VAR_IN_OUT
	r_errCount:Vec7i;
	r_jntCtrlErr :Vec7d;
END_VAR

VAR
	i :INT;
	err:Vec7d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[vecSub(i_cmdJntPos,i_curJntPos,  err);
r_jntCtrlErr:=err;

// joint error check
FOR i:=1 TO g_mJntNum DO 
	IF  ABS(r_jntCtrlErr[i]) > g_maxJntCtrlErr THEN
		r_errCount[i]:=r_errCount[i]+1;
	ELSE
		r_errCount[i] :=0;	
	END_IF
	jntCtrlErrCheck[i]:= r_errCount[i]>=g_faultTriggerCounts;
END_FOR
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="jntEncErrCheck" Id="{31ef1a61-be8a-4cf4-8816-44c2de3e927b}">
      <Declaration><![CDATA[METHOD jntEncErrCheck : Vec7b
VAR_INput
	i_motorJntPos : Vec7d;
	i_linkJntPos : Vec7d;
END_VAR
VAR_IN_OUT
	r_errCount:Vec7i;
	r_jntEncErr :Vec7d;
END_VAR

VAR
	i :INT;
	err:Vec7d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[vecSub(i_motorJntPos,i_linkJntPos,  err);
r_jntEncErr:=err;

// joint error check
FOR i:=1 TO g_mJntNum DO 
	IF  ABS(r_jntEncErr[i]) > g_maxJntEncErr THEN
		r_errCount[i]:=r_errCount[i]+1;
	ELSE
		r_errCount[i] :=0;
	END_IF
	jntEncErrCheck[i]:= r_errCount[i]>=g_faultTriggerCounts;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="jntLimitErrCheck" Id="{a4da3795-73c8-472d-94c8-3533763f2a83}">
      <Declaration><![CDATA[METHOD jntLimitErrCheck : Vec7b
VAR_INPUT
	i_armIdx:INT;
	i_curJntPos : Vec7d;
END_VAR
VAR_IN_OUT
	r_errCount:Vec7i;
END_VAR

VAR
	i :INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[i_curJntPos[4]:=i_curJntPos[4]+i_curJntPos[3]-i_curJntPos[2]-pi/2;//q4DH=q4motor+q8-q2-90;  

// joint limit check
FOR i:=1 TO 7 DO 
	IF  i_curJntPos[i] > GVL_ArmJointParameters.g_maxJntPos[i_armIdx,i] + g_armJntPosLimitBuffer[i] OR
		i_curJntPos[i] < GVL_ArmJointParameters.g_minJntPos[i_armIdx,i] - g_armJntPosLimitBuffer[i] THEN
		r_errCount[i]:=r_errCount[i]+1;
	ELSE
		r_errCount[i] :=0;	
	END_IF
	jntLimitErrCheck[i]:= r_errCount[i]>=g_faultTriggerCounts;
END_FOR
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="poseErrCheck" Id="{9fe210b5-ecf0-4498-8364-258d193de1ff}">
      <Declaration><![CDATA[METHOD poseErrCheck : BOOL
VAR_INPUT
	i_cmdPose : ST_Frame;
	i_curPose :ST_Frame;
END_VAR
VAR_IN_OUT
	r_errCount:INT;
	r_posErr :Vec3d;
	r_oriErr :Vec3d;
END_VAR

VAR
	posErr,oriErr:Vec3d;
	matT,rotErr:Mat3d;
	errAngle :LREAL;
	errAxis :Vec3d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
vecSub(i_cmdPose.m_pos, i_curPose.m_pos,posErr);
r_posErr:=posErr;

matTranspose(i_cmdPose.m_rot, matT);
matMultiply(matT,i_curPose.m_rot, rotErr);
rot2AngAxis(rotErr, angle=>errAngle, axis=>errAxis);
vecMultiNum(errAxis, errAngle,oriErr);
r_oriErr:=oriErr;
	
IF  norm(posErr)>g_maxCartPosErr OR norm(oriErr)> g_maxCartOriErr THEN
	r_errCount:= r_errCount +1;
ELSE 
	r_errCount:=0;
END_IF
poseErrCheck:= r_errCount >= g_faultTriggerCounts;
	]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MasterArmCheck">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterArmCheck.check">
      <LineId Id="41" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="80" Count="4" />
      <LineId Id="102" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="109" Count="1" />
      <LineId Id="38" Count="1" />
      <LineId Id="111" Count="1" />
      <LineId Id="159" Count="2" />
      <LineId Id="187" Count="2" />
      <LineId Id="113" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="119" Count="5" />
      <LineId Id="174" Count="0" />
      <LineId Id="125" Count="5" />
      <LineId Id="114" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="67" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterArmCheck.jntCtrlErrCheck">
      <LineId Id="25" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="72" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterArmCheck.jntEncErrCheck">
      <LineId Id="69" Count="10" />
      <LineId Id="67" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterArmCheck.jntLimitErrCheck">
      <LineId Id="104" Count="1" />
      <LineId Id="44" Count="2" />
      <LineId Id="103" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="70" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterArmCheck.poseErrCheck">
      <LineId Id="5" Count="0" />
      <LineId Id="48" Count="14" />
      <LineId Id="47" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>