<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_MasterDynamic" Id="{98ec5a5b-8c67-427f-a0c1-5fe09819a45a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MasterDynamic
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	m_armIdx :INT;
	//kinematic constraint
	//  q3 = q8 - q2;            qdot3=qdot8-qdot2;
	//  q9 = q2-q8;              qdot9=qdot2-qdot8;
	//  q4= q4motor+q8-q2-90;    qdot4=qdot4m+qdot8
 	// jacobian with active joints
 	// jaco_DH*qdot_DH = jaco_DH * (A * qdot_active)= jaco * qdot_active
 	// q_DH=[q1,q2,q3,q4,q5,q6,q7,q8,q9];
 	// q_active=[q1,q2,q8,q4m,q5,q6,q7]
	m_jacoA :ARRAY[1..9,1..7] OF LREAL:=
		[   1,  0,  0,  0,  0,  0,  0,
			0,  1,  0,  0,  0,  0,  0,
			0, -1,  1,  0,  0,  0,  0,
			0, -1,  1,  1,  0,  0,  0,
			0,  0,  0,  0,  1,  0,  0,
			0,  0,  0,  0,  0,  1,  0,
			0,  0,  0,  0,  0,  0,  1,
			0,  0,  1,  0,  0,  0,  0,
			0,  1, -1,  0,  0,  0,  0];
	
	// DH parameters
	m_armDH:ARRAY[1..9] OF Vec4d;// last column is joint position
	m_d1, m_a3,m_a4,m_d4,m_a9 :LREAL;
	
	// dynamic parameters
	m_linkMass :ARRAY[1..9] OF LREAL;
	m_linkCOM :ARRAY[1..9] OF Vec3d;
	m_linkInertia :ARRAY[1..9] OF Mat3d;
		
	// frame of each joint
	m_jntFrame :ARRAY[1..9] OF ST_Frame;
	
	// jacobian of mass center
	m_Jp :ARRAY[1..9] OF Mat37;
	m_Jo :ARRAY[1..9] OF Mat37;
	
	// tcp jacobian
	m_jaco : Mat67;
	
	// motor inertia at link size
	m_motorInertia :Vec7d;
	
	// mass matrix in joint space
	m_massMat :Mat7d;
	m_massMatInv:Mat7d;
	
	// mass matrix in cartesian space
	m_lambdaInv :Mat6d;
	m_lambda :Mat6d;
	
	// dynamic nullspace(I-J'*inv(J'))
	m_JtGeneInv :Mat67;
	m_dynaNullspace : Mat7d;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Property" Id="{a2a88cc3-8177-45b9-8a2a-e92a999e61b9}" />
    <Property Name="cartMassMat" Id="{5e392b2d-478c-4674-82aa-cd060d237dad}" FolderPath="Property\">
      <Declaration><![CDATA[PROPERTY PUBLIC cartMassMat : Mat6d]]></Declaration>
      <Get Name="Get" Id="{cfae2a6c-4509-440a-a508-e2368e407f95}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[cartMassMat := m_lambda;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="dynaNullspace" Id="{e60c35bf-e43e-4f7c-a263-b94579047364}" FolderPath="Property\">
      <Declaration><![CDATA[PROPERTY PUBLIC dynaNullspace : Mat7d]]></Declaration>
      <Get Name="Get" Id="{7aef4a67-80d1-489d-ae23-27418efd6a1c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[dynaNullspace:=m_dynaNullspace;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="init" Id="{8875001b-4ea6-4a82-974b-57d1dabe89c7}">
      <Declaration><![CDATA[METHOD init : BOOL
VAR_INPUT
	i_armIdx :INT ;
END_VAR

VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_armIdx:=i_armIdx;
m_d1:=g_d1;
m_a3:=g_a3;
m_a4:=g_a4;
m_d4:=g_d4;
m_a9:=g_a9;

m_linkMass:=GVL_ArmDynamics.g_linkMass;
FOR i:=1 TO 9 DO
	m_linkCOM[i][1]:=GVL_ArmDynamics.g_linkCOM[i,1];
	m_linkCOM[i][2]:=GVL_ArmDynamics.g_linkCOM[i,2];
	m_linkCOM[i][3]:=GVL_ArmDynamics.g_linkCOM[i,3];
	
	m_armDH[i][1]:=g_masterArmDH[i,1];
	m_armDH[i][2]:=g_masterArmDH[i,2];
	m_armDH[i][3]:=g_masterArmDH[i,3];
	m_armDH[i][4]:=g_masterArmDH[i,4];
	
	m_linkInertia[i][1,1]:=GVL_ArmDynamics.g_linkInertia[i,1];
	m_linkInertia[i][2,2]:=GVL_ArmDynamics.g_linkInertia[i,2];
	m_linkInertia[i][3,3]:=GVL_ArmDynamics.g_linkInertia[i,3];
	m_linkInertia[i][1,2]:=GVL_ArmDynamics.g_linkInertia[i,4];
	m_linkInertia[i][1,3]:=GVL_ArmDynamics.g_linkInertia[i,5];
	m_linkInertia[i][2,3]:=GVL_ArmDynamics.g_linkInertia[i,6];
	m_linkInertia[i][2,1]:=m_linkInertia[i][1,2];
	m_linkInertia[i][3,1]:=m_linkInertia[i][1,3];
	m_linkInertia[i][3,2]:=m_linkInertia[i][2,3];
END_FOR

FOR i:=1 TO 7 DO
	m_motorInertia[i]:=GVL_ArmDynamics.g_motorInertia[i]*GVL_ArmJointParameters.g_motorReduction[i]*GVL_ArmJointParameters.g_motorReduction[i];
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Property Name="jntMassMat" Id="{ea9f4175-c5a8-4a83-9775-2ce4ca717798}" FolderPath="Property\">
      <Declaration><![CDATA[PROPERTY PUBLIC jntMassMat : Mat7d]]></Declaration>
      <Get Name="Get" Id="{a508046a-219b-4f72-b5a5-b486bb600f60}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[jntMassMat := m_massMat;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="updateDynamic" Id="{851887cc-2732-4394-8620-0ab012b3b9d9}">
      <Declaration><![CDATA[// update dynamic and kinematic data 
METHOD updateDynamic : BOOL
VAR_IN_OUT CONSTANT
	i_jntPos : Vec7d;
END_VAR
VAR
	
	i,j:INT;
	m,n :INT;
	linkMassMat :ARRAY[1..9] OF Mat7d;
	linkInerMat :ARRAY[1..9] OF Mat7d;
	inertia,Rt :Mat3d;
	JotI :ARRAY[1..7,1..3] OF LREAL;
	Jot :ARRAY[1..7,1..3] OF LREAL;
	Jpt :ARRAY[1..7,1..3] OF LREAL;
	
	tmpMat3d :Mat3d;
	tmpMat67: Mat67;
	tmpMat7d : Mat7d;
	jacoT: Mat76;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// update kinematic 
updateKinematic(i_jntPos);

// joint space mass matrix
// massMat=m*Jp'*Jp+Jo'*R*I*R'*Jo
FOR i:=1 TO 9 DO
	// iner=R*I*R'
	matMultiply(m_jntFrame[i].m_rot,m_linkInertia[i],tmpMat3d);
	matTranspose(m_jntFrame[i].m_rot, Rt);
	matMultiply(tmpMat3d,Rt,inertia);
	
	// m*Jp'*Jp+Jo'*iner*Jo
	matTranspose(m_Jp[i],Jpt);
	matMultiply(Jpt,m_Jp[i], tmpMat7d);
	matMultiNum(tmpMat7d, m_linkMass[i],linkMassMat[i]);
	
	matTranspose(m_Jo[i],Jot);
	matMultiply(Jot,inertia, JotI);
	matMultiply(JotI,m_Jo[i],linkInerMat[i]);
END_FOR

// total mass mat
m_massMat :=g_zeroMat7d;
FOR i:=1 TO 9 DO
	matSelfAdd(m_massMat,linkMassMat[i]);
	matSelfAdd(m_massMat,linkInerMat[i]);
END_FOR

// add motor inertial 
FOR i:=1 TO 7 DO
	m_massMat[i,i]:=m_massMat[i,i]+m_motorInertia[i];
END_FOR

// mass mat inverse
invMat7(m_massMat,m_massMatInv);

// cartesian mass matrix
matTranspose(m_jaco, jacoT);
matMultiply(m_jaco,m_massMatInv, tmpMat67);
matMultiply(tmpMat67, jacoT, m_lambdaInv);
invMat6(m_lambdaInv, m_lambda);

// dyanmic nullspace
matMultiply(m_lambda, m_jaco, tmpMat67);
matMultiply(tmpMat67, m_massMatInv, m_JtGeneInv);
matMultiply(jacoT,m_JtGeneInv,tmpMat7d);
matSub(g_eye7d, tmpMat7d, m_dynaNullspace);


]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateKinematic" Id="{d7eec9ea-d7e0-4c73-a3ad-1deeadc32f97}">
      <Declaration><![CDATA[// only update kinematic data
METHOD PROTECTED updateKinematic : BOOL
VAR_IN_OUT CONSTANT
	i_jntPos : Vec7d;
END_VAR
VAR
	Jp :ARRAY[1..3, 1..9] OF LREAL:=[27(0)];
	Jo :ARRAY[1..3, 1..9] OF LREAL:=[27(0)];
	jacoDH :Mat67;
	T :ST_Frame;
	i,j:INT;
	Pc,z,p:Vec3d;
	tcpPos :Vec3d;
	m,n :INT;
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// tranform a joint positon to DH ones
m_armDH[1][4]:=i_jntPos[1];
m_armDH[2][4]:=i_jntPos[2];
m_armDH[3][4]:=i_jntPos[3]-i_jntPos[2];
m_armDH[4][4]:=i_jntPos[4]+i_jntPos[3]-i_jntPos[2]-pi/2;
m_armDH[5][4]:=i_jntPos[5];
m_armDH[6][4]:=i_jntPos[6];
m_armDH[7][4]:=i_jntPos[7];
m_armDH[8][4]:=i_jntPos[3];
m_armDH[9][4]:=i_jntPos[2]-i_jntPos[3];

// compute joint frame
m_jntFrame[1]:=DHTrans(m_armDH[1]);
T:=DHTrans(m_armDH[2]);
m_jntFrame[2]:=transform(m_jntFrame[1],T);
T:=DHTrans(m_armDH[3]);
m_jntFrame[3]:=transform(m_jntFrame[2],T);
T:=DHTrans(m_armDH[4]);
m_jntFrame[4]:=transform(m_jntFrame[3],T);
T:=DHTrans(m_armDH[5]);
m_jntFrame[5]:=transform(m_jntFrame[4],T);
T:=DHTrans(m_armDH[6]);
m_jntFrame[6]:=transform(m_jntFrame[5],T);
T:=DHTrans(m_armDH[7]);
m_jntFrame[7]:=transform(m_jntFrame[6],T);
T:=DHTrans(m_armDH[8]);
m_jntFrame[8]:=transform(m_jntFrame[1],T);
T:=DHTrans(m_armDH[9]);
m_jntFrame[9]:=transform(m_jntFrame[8],T);

// tcp jacobian
tcpPos:=m_jntFrame[7].m_pos;
FOR i:=1 TO 7 DO
	T:=m_jntFrame[i];
	z[1]:=T.m_rot[1,3];
	z[2]:=T.m_rot[2,3];
	z[3]:=T.m_rot[3,3];
	vecSub(tcpPos,T.m_pos,p);
	p:=cross(z,p);
	jacoDH[1,i]:=p[1];
	jacoDH[2,i]:=p[2];
	jacoDH[3,i]:=p[3];
	jacoDH[4,i]:=z[1];
	jacoDH[5,i]:=z[2];
	jacoDH[6,i]:=z[3];
END_FOR
// multiply m_jacoA
FOR m:=1 TO 6 DO 
	FOR n:=1 TO 7 DO
		IF 2=n THEN
			m_Jaco[m,n]:=jacoDH[m,2]-jacoDH[m,3]-jacoDH[m,4];
		ELSIF 3 =n THEN
			m_Jaco[m,n]:=jacoDH[m,3]+jacoDH[m,4];
		ELSE
			m_Jaco[m,n]:=jacoDH[m,n];
		END_IF
	END_FOR
END_FOR


// jacobian of mass center
FOR i:=1 TO 9 DO 
    T:=m_jntFrame[i];
	// mass center world position
    matMultiVec(T.m_rot,m_linkCOM[i], Pc);
	vecSelfAdd(Pc, T.m_pos);
    FOR j:=1 TO i DO
        IF (i>7 AND j>1 AND j<8) THEN
			Jp[1,j]:=0;
			Jp[2,j]:=0;
			Jp[3,j]:=0;
			Jo[1,j]:=0;
			Jo[2,j]:=0;
			Jo[3,j]:=0;
            CONTINUE;
        END_IF
        T:=m_jntFrame[j];
		z[1]:=T.m_rot[1,3];
		z[2]:=T.m_rot[2,3];
		z[3]:=T.m_rot[3,3];
        vecSub(Pc,T.m_pos,p);
		p:=cross(z,p);
		Jp[1,j]:=p[1];
		Jp[2,j]:=p[2];
		Jp[3,j]:=p[3];
        Jo[1,j]:=z[1];
		Jo[2,j]:=z[2];
		Jo[3,j]:=z[3];
    END_FOR
	// multiply m_jacoA
	FOR m:=1 TO 3 DO 
		FOR n:=1 TO 7 DO
			IF 2=n THEN
				m_Jp[i][m,n]:=Jp[m,2]-Jp[m,3]-Jp[m,4]+Jp[m,9];
				m_Jo[i][m,n]:=Jo[m,2]-Jo[m,3]-Jo[m,4]+Jo[m,9];
			ELSIF 3 =n THEN
				m_Jp[i][m,n]:=Jp[m,3]+Jp[m,4]+Jp[m,8]-Jp[m,9];
				m_Jo[i][m,n]:=Jo[m,3]+Jo[m,4]+Jo[m,8]-Jo[m,9];
			ELSE
				m_Jp[i][m,n]:=Jp[m,n];
				m_Jo[i][m,n]:=Jo[m,n];
			END_IF
		END_FOR
	END_FOR
END_FOR]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_MasterDynamic">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterDynamic.cartMassMat.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterDynamic.dynaNullspace.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterDynamic.init">
      <LineId Id="31" Count="0" />
      <LineId Id="6" Count="4" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="32" Count="4" />
      <LineId Id="38" Count="2" />
      <LineId Id="37" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="22" Count="7" />
      <LineId Id="16" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterDynamic.jntMassMat.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterDynamic.updateDynamic">
      <LineId Id="529" Count="48" />
      <LineId Id="263" Count="0" />
    </LineIds>
    <LineIds Name="FB_MasterDynamic.updateKinematic">
      <LineId Id="6" Count="29" />
      <LineId Id="128" Count="28" />
      <LineId Id="36" Count="5" />
      <LineId Id="172" Count="0" />
      <LineId Id="43" Count="37" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>