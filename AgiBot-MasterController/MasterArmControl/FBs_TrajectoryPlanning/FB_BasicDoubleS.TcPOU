<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_BasicDoubleS" Id="{3d4218fa-47ff-4ce3-8b1a-14c663d40404}" SpecialFunc="None">
    <Declaration><![CDATA[// reference: Trajectory planning for automation machines and robots
FUNCTION_BLOCK FB_BasicDoubleS EXTENDS FB_trajBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// endpoints position AND velocity
	m_q :ARRAY[1..2] OF LREAL;
	m_v :ARRAY[1..2] OF LREAL;
	
	// traj constraint
	m_maxV :LREAL:=0;
	m_maxA :LREAL:=0;
	m_maxJ :LREAL:=0;
	
	// acceleration duration
	m_Taj :LREAL :=0;
	m_Ta :LREAL :=0;
	
	// constant velocity duration
	m_Tv :LREAL :=0;
	
	// deceleration duration
	m_Tdj :LREAL :=0;
	m_Td:LREAL :=0;
	
	// traj sign
	m_sign : LREAL :=1;
	
	// trajectory parmaters
	m_limitAcc :LREAL :=0;
	m_limitDec :LREAL :=0;
	m_limitVel :LREAL :=0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="evaluate" Id="{438c4ba3-7806-4cfa-8ef0-e6fa3feebb04}">
      <Declaration><![CDATA[METHOD PUBLIC evaluate : BOOL
VAR_INPUT
	t :LREAL;
END_VAR

VAR_OUTPUT
	q,q_dot,q_ddot :LREAL;
END_VAR
VAR
	q0,q1,v0,v1:LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FALSE = m_isGenerated THEN
	evaluate := FALSE;
	RETURN;
END_IF

q:=0;
q_dot:=0;
q_ddot:=0;
q0:=m_q[1];
q1:=m_q[2];
v0:=m_v[1];
v1:=m_v[2];

IF t<=0 THEN
	q:=q0;
	q_dot:=v0;
	q_ddot:=0;
ELSIF m_Taj>0 AND  t<=m_Taj THEN
	q:=q0+v0*t+m_maxJ*EXPT(t,3)/6;
	q_dot:=v0+m_maxJ*EXPT(t,2)/2;
	q_ddot:=m_maxJ*t;
ELSIF m_Ta>2*m_Taj AND  t<=m_Ta-m_Taj THEN
	q:=q0+v0*t+m_limitAcc*(3*EXPT(t,2)-3*m_Taj*t+EXPT(m_Taj,2))/6;
	q_dot:=v0+m_limitAcc*(t-m_Taj/2);
	q_ddot:=m_limitAcc;
ELSIF m_Taj>0 AND  t<=m_Ta THEN
	q:=q0+(v0+m_limitVel)*m_Ta/2-m_limitVel*(m_Ta-t)+m_maxJ*EXPT(m_Ta-t,3)/6;
	q_dot:=m_limitVel-m_maxJ*EXPT(m_Ta-t,2)/2;
	q_ddot:=m_maxJ*(m_Ta-t);
ELSIF m_Tv>0 AND  t<=m_Ta+m_Tv THEN
	q:=q0+(v0+m_limitVel)*m_Ta/2+m_limitVel*(t-m_Ta);
	q_dot:=m_limitVel;
	q_ddot:=0;
ELSIF m_Tdj>0 AND  t<=m_Ta+m_Tv+m_Tdj THEN
	q:=q1-(m_limitVel+v1)*m_Td/2+m_limitVel*(t-m_duration+m_Td)-m_maxJ*EXPT(t-m_duration+m_Td,3)/6;
	q_dot:=m_limitVel-m_maxJ*EXPT(t-m_duration+m_Td,2)/2;
	q_ddot:=-m_maxJ*(t-m_duration+m_Td);
ELSIF m_Td>2*m_Tdj AND  t<=m_duration-m_Tdj THEN
	q:=q1-(m_limitVel+v1)*m_Td/2+m_limitVel*(t-m_duration+m_Td)+m_limitDec*(3*expt(t-m_duration+m_Td,2)-3*m_Tdj*(t-m_duration+m_Td)+m_Tdj*m_Tdj)/6;
	q_dot:=m_limitVel+m_limitDec*(t-m_duration+m_Td-m_Tdj/2);
	q_ddot:=m_limitDec;
ELSIF m_Tdj>0 AND  t<=m_duration THEN
	q:=q1-v1*(m_duration-t)-m_maxJ*EXPT(m_duration-t,3)/6;
	q_dot:=v1+m_maxJ*EXPT(m_duration-t,2)/2;
	q_ddot:=-m_maxJ*(m_duration-t);
ELSIF t>m_duration THEN
	q:=q1;
	q_dot:=v1;
	q_ddot:=0;
END_IF

q:=m_sign*q;
q_dot:=m_sign*q_dot;
q_ddot:=m_sign*q_dot;
evaluate := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{24529a50-c281-455f-b66e-18f1a7d82660}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_INPUT
	q :ARRAY[1..2] OF LREAL;
	v :ARRAY[1..2] OF LREAL;
	maxV :LREAL;
	maxA :LREAL;
	maxJ :LREAL;
END_VAR
VAR
	q0,q1,v0,v1,h,Delta :LREAL;
	recursiveStep :LREAL :=0.8;
	maxRecursiveTime :INT :=10;
	recursiveTime :INT :=0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//normalize computation AND parameters
m_isGenerated:=FALSE;
IF q[2]=q[1] THEN
	m_sign:=1;
else
	m_sign:=(q[2]-q[1])/ABS(q[2]-q[1]);
END_IF
m_q[1]:=m_sign*q[1];
m_q[2]:=m_sign*q[2];
m_v[1]:=m_sign*v[1];
m_v[2]:=m_sign*v[2];
m_maxV:=maxV;
m_maxA:=maxA;
m_maxJ:=maxJ;

// set initial and final parameters
q0:=m_q[1];
q1:=m_q[2];
v0:=m_v[1];
v1:=m_v[2];
h:=q1-q0;

// check if traj is feasible
IF trajCheck(q1-q0,v0,v1,maxA,maxJ)=FALSE THEN 
	init :=FALSE;
	RETURN;
END_IF

// if initial and final position is same
IF ABS(q1-q0)<g_smallNum THEN
	m_Tv:=g_smallNum;
	m_duration:=g_smallNum;
	m_isGenerated:=TRUE;
	return;
END_IF

// assuming tha maxV are reached and compute the time intervel of constant velocity
// maxA not reached
IF maxA*maxA>(maxV-v0)*maxJ THEN
	m_Taj:=SQRT((maxV-v0)/maxJ);
	m_Ta:=2*m_Taj;
	m_limitAcc:=m_Taj*maxJ;
// maxA reached
else
	m_Taj:=maxA/maxJ;
	m_Ta:=m_Taj+(maxV-v0)/maxA;
	m_limitAcc:=maxA;
END_IF

// minA not reached
IF maxA*maxA>(maxV-v1)*maxJ THEN
	m_Tdj:=SQRT((maxV-v1)/maxJ);
	m_Td:=2*m_Tdj;
	m_limitDec:=-m_Tdj*maxJ;
// minA reached
else
	m_Tdj:=maxA/maxJ;
	m_Td:=m_Tdj+(maxV-v1)/maxA;
	m_limitDec:=-maxA;
END_IF
m_Tv:=(q1-q0)/maxV-m_Ta*(1+v0/maxV)/2-m_Td*(1+v1/maxV)/2;

// maxV reached
IF m_Tv>0 THEN
	m_limitVel:=maxV;
	m_isGenerated:=TRUE;
// maxV not reached, in this case, maxA must reach
else
	m_Tv:=0;
	recursiveTime:=0;
	WHILE(m_isGenerated=FALSE AND recursiveTime<maxRecursiveTime) DO
		m_Taj:=maxA/maxJ;
		m_Tdj:=maxA/maxJ;
		Delta:=EXPT(maxA,4)/EXPT(maxJ,2)+2*(v0*v0+v0*v1)+maxA*(4*h-2*maxA*(v0+v1)/maxJ);
		m_Ta:=(maxA*maxA/maxJ-2*v0+SQRT(Delta))/(2*maxA);
		m_Td:=(maxA*maxA/maxJ-2*v1+SQRT(Delta))/(2*maxA);
		IF(m_Ta<0 AND v0>v1) THEN
			m_Taj:=0;
			m_Ta:=0;
			m_Td:=2*h/(v1+v0);
			m_Tdj:=(maxJ*h-SQRT(maxJ*(maxJ*h*h+EXPT(v0+v1,2)*(v1-v0))))/(maxJ*(v1+v0));
			m_isGenerated:=TRUE;
		ELSIF(m_Td<0 AND v1>v0) THEN
			m_Tdj:=0;
			m_Td:=0;
			m_Ta:=2*h/(v1+v0);
			m_Taj:=(maxJ*h-SQRT(maxJ*(maxJ*h*h-EXPT(v0+v1,2)*(v1-v0))))/(maxJ*(v1+v0));
			m_isGenerated:=TRUE;
		END_IF

		IF m_Ta>=2*m_Taj AND m_Td>=2*m_Tdj THEN
			m_isGenerated:=TRUE;
		END_IF

		IF m_isGenerated=TRUE THEN
			m_limitAcc:=maxJ*m_Taj;
			m_limitDec:=-maxJ*m_Tdj;
			m_limitVel:=v0+(m_Ta-m_Taj)*m_limitAcc;
			EXIT;       
		END_IF
		recursiveTime:=recursiveTime+1;
		maxA:=maxA*recursiveStep;
	END_WHILE
END_IF

// total duration
m_duration:=m_Ta+m_Tv+m_Td;
m_isGenerated:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="trajCheck" Id="{84bd9883-7e5f-46ba-94ef-c11efe5fa6a2}">
      <Declaration><![CDATA[// check if the trajectory is feasible
METHOD PROTECTED trajCheck : BOOL
VAR_INPUT
	h : LREAL;
	v0 : LREAL;
	v1 : LREAL;
	maxA : LREAL;
	maxJ : LREAL;
END_VAR
VAR
	T1,T2,dis,t :LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[T1:=SQRT(ABS(v1-v0)/maxJ);
T2:=maxA/maxJ;
t:=MIN(T1,T2);
IF t<T2 THEN
	dis:=t*ABS(v0+v1);
else
	dis:=ABS(v0+v1)*(t+ABS(v1-v0)/maxA)/2;
END_IF

IF ABS(h)>=dis THEN 
	trajCheck:=TRUE;
else
	trajCheck:=FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_BasicDoubleS">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicDoubleS.evaluate">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="11" Count="7" />
      <LineId Id="20" Count="37" />
      <LineId Id="66" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicDoubleS.init">
      <LineId Id="6" Count="7" />
      <LineId Id="114" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="15" Count="10" />
      <LineId Id="120" Count="0" />
      <LineId Id="26" Count="11" />
      <LineId Id="39" Count="10" />
      <LineId Id="121" Count="0" />
      <LineId Id="50" Count="13" />
      <LineId Id="65" Count="6" />
      <LineId Id="73" Count="35" />
      <LineId Id="5" Count="0" />
      <LineId Id="135" Count="0" />
    </LineIds>
    <LineIds Name="FB_BasicDoubleS.trajCheck">
      <LineId Id="7" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="30" Count="9" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>